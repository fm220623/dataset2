import pandas as pd
import streamlit as st
from datetime import datetime

#–°—Ç—Ä–∞–Ω–∏—á–∫–∞
st.set_page_config(
    page_title="–ü–æ–≥–æ–¥–∞ –≤ Szeged",
    page_icon="üå§Ô∏è",
    layout="centered"
)

#–ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üå¶Ô∏è –ü–æ–≥–æ–¥–∞ –≤ Szeged –∑–∞ 10 –ª–µ—Ç")
st.write("–°–º–æ—Ç—Ä–∏ –∫–∞–∫ –º–µ–Ω—è–ª–∞—Å—å –ø–æ–≥–æ–¥–∞ —Å 2006 –ø–æ 2016 –≥–æ–¥")

#–î–∞–Ω–Ω—ã–µ
@st.cache_data
def load_data():
    data = pd.read_csv("weatherHistory.csv")
    data['Formatted Date'] = pd.to_datetime(data['Formatted Date'], utc=True)
    data['Year'] = data['Formatted Date'].dt.year
    data['Month'] = data['Formatted Date'].dt.month
    data['Day'] = data['Formatted Date'].dt.day
    data['Date'] = data['Formatted Date'].dt.date
    return data

df = load_data()

st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

group_by = st.sidebar.radio(
    "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:",
    ["–ü–æ –¥–Ω—è–º", "–ü–æ –Ω–µ–¥–µ–ª—è–º"],
    index=0
)

#–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
chart_type = st.sidebar.radio(
    "–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ:",
    ["–í—Å–µ –¥–∞–Ω–Ω—ã–µ", "–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è"],
    help="–ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–µ –∑–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é"
)

#–§–∏–ª—å—Ç—Ä
if group_by == "–ü–æ –¥–Ω—è–º":
    year = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
        sorted(df['Year'].unique()),
        index=len(df['Year'].unique())-1
    )

    month = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        range(1, 13)
    )
    
    filtered = df[(df['Year'] == year) & (df['Month'] == month)]
    
    if chart_type == "–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è":
        filtered = filtered.groupby('Date').mean(numeric_only=True).reset_index()
    else:
        filtered = filtered.sort_values('Date')
    
    x_axis = 'Date'
    
else:  # –ï—Å–ª–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
    year = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
        sorted(df['Year'].unique()),
        index=len(df['Year'].unique())-1
    )
    
    filtered = df[df['Year'] == year].copy()
    filtered['Week'] = filtered['Formatted Date'].dt.isocalendar().week
    
    if chart_type == "–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è":
        filtered = filtered.groupby('Week').mean(numeric_only=True).reset_index()
    
    x_axis = 'Week'

#–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
temp_filter = st.sidebar.slider(
    "–î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä (¬∞C):",
    float(df['Temperature (C)'].min()),
    float(df['Temperature (C)'].max()),
    (10.0, 20.0)
)

filtered = filtered[
    (filtered['Temperature (C)'] >= temp_filter[0]) & 
    (filtered['Temperature (C)'] <= temp_filter[1])
]

#–î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞
metrics = st.sidebar.multiselect(
    "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç—å:",
    ['Temperature (C)', 'Humidity', 'Wind Speed (km/h)'],
    default=['Temperature (C)', 'Humidity']
)

#–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç –≤—ã–±–æ—Ä–∞
if group_by == "–ü–æ –¥–Ω—è–º":
    st.header(f"–ü–æ–≥–æ–¥–∞ –≤ {month}.{year} ({'—Å—Ä–µ–¥–Ω–∏–µ' if chart_type == '–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è' else '–≤—Å–µ –¥–∞–Ω–Ω—ã–µ'})")
else:
    st.header(f"–ü–æ–≥–æ–¥–∞ –≤ {year} ({'—Å—Ä–µ–¥–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª–∏' if chart_type == '–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è' else '–ø–æ –Ω–µ–¥–µ–ª—è–º'})")

#–¶–≤–µ—Ç
st.subheader("üé® –í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
colors = {}
for m in metrics:
    colors[m] = st.color_picker(
        f"–¶–≤–µ—Ç –¥–ª—è {m}",
        "#4CAF50" if m == 'Temperature (C)' else "#2196F3" if m == 'Humidity' else "#FF5722"
    )

#–ì—Ä–∞—Ñ–∏–∫
st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –ø–æ–≥–æ–¥—ã")
st.line_chart(
    filtered,
    x=x_axis,
    y=metrics,
    color=[colors[m] for m in metrics]
)

#"–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"
if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö"):
    st.write(filtered)

with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
    st.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(filtered)}")
    st.write(filtered.describe())

#–í—ã–≤–æ–¥
avg_temp = filtered['Temperature (C)'].mean()

st.subheader("üîç –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?")
if avg_temp > 20:
    st.success(f"‚òÄÔ∏è –ë—ã–ª–æ –∂–∞—Ä–∫–æ! –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f}¬∞C")
elif avg_temp > 10:
    st.info(f"üå§Ô∏è –ë—ã–ª–æ —Ç–µ–ø–ª–æ! –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f}¬∞C")
else:
    st.warning(f"‚ùÑÔ∏è –ë—ã–ª–æ —Ö–æ–ª–æ–¥–Ω–æ! –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f}¬∞C")

#–û–±–Ω–æ–≤–∏—Ç—å, –µ—Å–ª–∏ —á—Ç–æ —Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—Ç
if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.rerun()
